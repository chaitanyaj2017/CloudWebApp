{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloud Formation Template - CSYE6225 - Creating EC2 instance , Security Groups and Ingress Rules",
    "Parameters": {
        "EC2Name": {
            "Type": "String"
        },
        "SubnetId1": {
            "Type": "String"
        },
        "SubnetId2": {
            "Type": "String"
        },
        "SubnetId3": {
            "Type": "String"
        },
        "VpcId": {
            "Type": "String"
        },
        "AMI": {
            "Type": "String"
        },
        "S3Bucket": {
            "Default": "",
            "Type": "String"
        },
        "S3CodeBucket": {
            "Default": "",
            "Type": "String"
        },
        "RoleArn": {
            "Default": "",
            "Type": "String"
        },
        "keyName": {
            "Default": "",
            "Type": "String"
        },
        "DBName": {
            "Default": "csye6225",
            "Description": "This is my database name",
            "Type": "String"
        },
        "DBUsername": {
            "Default": "csye6225master",
            "Description": "The database admin account username",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DBPassword": {
            "Default": "csye6225password",
            "Description": "The database admin account password",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9]*"
        },
        "TagKey": {
            "Type": "String",
            "Default": "csye6225-EC2-Key"
        },
        "TagValue": {
            "Type": "String",
            "Default": "csye6225-EC2"
        },
	"mySNSTopicName": {
            "Default": "reset_password",
            "Description": "SNS Topic name",
            "Type": "String"
        },
        "Domain": {
            "Default": "csye6225-spring2019-joshichai.me",
            "Description": "from email id",
            "Type": "String"
        }
    },
    "Resources": {
        "ourEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t2.micro",
                "DisableApiTermination": false,
                "ImageId": {
                    "Ref": "AMI"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "20",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2ServiceRoleInstanceProfile"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "SubnetId1"
                },
                "Tags": [
                    {
                        "Key": {
                            "Ref": "TagKey"
                        },
                        "Value": {
                            "Ref": "TagValue"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "keyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe ",
                                "cd /opt/tomcat",
                                "sudo chgrp -R tomcat /opt/tomcat",
                                "sudo chmod -R g+r conf",
                                "sudo chmod -R g+x conf",
                                "sudo chown -R tomcat webapps/ work/ temp/ logs/",
                                "cd /usr/lib/systemd/system",
                                "touch tomcat.service",
                                "echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                                "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "sudo chmod -R 777 /opt/tomcat",
                                "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Durl=jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "MyRDSDB",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":3306/csye6225\"'>> /opt/tomcat/bin/setenv.sh \n"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.profiles.active=dev\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DendpointUrl=https://s3.us-east-1.amazonaws.com\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dfolder=centos\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dusername=",
                                            {
                                                "Ref": "DBUsername"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dpassword=",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DbucketName=",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
				{
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DsnsName=",
                                            {
                                                "Ref": "mySNSTopicName"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                "chmod +x /opt/tomcat/bin/setenv.sh",
                                "systemctl daemon-reload",
                                "systemctl enable tomcat.service",
                                "systemctl start tomcat.service",
                                "sudo chmod -R 777 /opt/aws",
                                "sudo chmod -R 777 /opt/codedeploy-agent"
                            ]
                        ]
                    }
                }
            },
            "DependsOn": [
                "EC2ServiceRoleInstanceProfile",
                "MySNS"
            ]
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to ports 22, 80 & 443",
                "GroupName": "csye6225-bk",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "AWSdynamotable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "TableName": "csye6225",
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Creating Security group with ingress rules for webapp",
                "GroupName": "csye6225-rds",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "csye6225-rds"
                    }
                ]
            }
        },
        "dbSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "RDS Subnet Group",
                "DBSubnetGroupName": "rds",
                "SubnetIds": [
                    {
                        "Ref": "SubnetId2"
                    },
                    {
                        "Ref": "SubnetId3"
                    }
                ]
            }
        },
        "MyRDSDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "10",
                "MultiAZ": "False",
                "DBInstanceIdentifier": "csye6225",
                "DBInstanceClass": "db.t2.medium",
                "MasterUsername": "csye6225master",
                "MasterUserPassword": "csye6225password",
                "Engine": "MySQL",
                "DBName": "csye6225",
                "DBSubnetGroupName": {
                    "Ref": "dbSubnetGroup"
                },
                "PubliclyAccessible": true,
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": "csye6225-webapp",
                "ComputePlatform": "Server"
            }
        },
        "CodeDeployApplicationGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "AutoRollbackConfiguration": {
                    "Events": [
                        "DEPLOYMENT_FAILURE"
                    ]
                },
                "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
                "DeploymentGroupName": "csye6225-webapp-deployment",
                "DeploymentStyle": {
                    "DeploymentType": "IN_PLACE",
                    "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
                },
                "Ec2TagFilters": [
                    {
                        "Key": {
                            "Ref": "TagKey"
                        },
                        "Value": {
                            "Ref": "TagValue"
                        },
                        "Type": "KEY_AND_VALUE"
                    }
                ],
                "ServiceRoleArn": {
                    "Ref": "RoleArn"
                }
            },
            "DependsOn": [
                "CodeDeployApplication",
                "ourEC2Instance"
            ]
        },
        "CodeDeployEC2S3": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "This policy allows EC2 instances to get data from S3 buckets. This is required for EC2 instances to download latest application revision.",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:GetObject",
                                "s3:PutObjectAcl"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3CodeBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployEC2ServiceRole"
                    }
                ],
                "ManagedPolicyName": "CodeDeployEC2S3"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "SNSPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "This policy allows EC2 to access SNS",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "SNS:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployEC2ServiceRole"
                    }
                ],
                "ManagedPolicyName": "SNSPolicy"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "CodeDeployEC2ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "CodeDeployEC2ServiceRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
                ]
            }
        },
        "EC2ServiceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    "CodeDeployEC2ServiceRole"
                ],
                "InstanceProfileName": "EC2ServiceRoleInstanceProfile"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "MyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "MyLambdaFunction",
                "Handler": "Email::handleRequest",
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3CodeBucket"
                    },
                    "S3Key": "lambda-1.0-SNAPSHOT.zip"
                },
                "Role": {
                    "Fn::ImportValue": "LambdaExecutionRoleARN"
                },
                "Description": "lambda to host webapp",
                "Environment": {
                    "Variables": {"DOMAIN_NAME":{"Fn::Join":["",["https://www.",{"Ref": "Domain" }]]}, "FROM_EMAIL":{"Fn::Join":["",["no-reply@test.",{"Ref": "Domain" }]]}, "TABLENAME":"csye6225", "TTL":"20"} 
                },
                "Runtime": "java8",
                "Timeout": 100,
                "MemorySize": 256
            }
        },
        "MySNS": {
            "Type": "AWS::SNS::Topic",
            "DependsOn": "MyLambdaFunction",
            "Properties": {
                "TopicName": { 
			"Ref": "mySNSTopicName" 
		},
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "MyLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ],
                "DisplayName": "MySNS"
            }
        },
        "LambdaResourcePolicy": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "MyLambdaFunction",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "Action": "lambda:InvokeFunction",
                "SourceArn": {
                    	"Ref": "MySNS"
                    
                }
            }
        }
    }
}
        
